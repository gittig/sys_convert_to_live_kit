#!/bin/sh

# do not set "-e" flag

this_link="$0"

# switch root from initramfs to ramfs, required by pivot_root system call.
func_0()
{
    if [ ! -e /boot_done_func_0 ]; then
        touch /boot_done_func_0
        mymount="m0"
        mkdir -p "${mymount}"                            || exit 1

        # the default tmpfs size is 50% RAM size
        # it constrains the maxium size of squashfs root image to be loaded into RAM
#       mount -t tmpfs -o size="80%" tmpfs "${mymount}"/ || exit 1
        mount -t tmpfs               tmpfs "${mymount}"/ || exit 1

        ls /                                            \
            | grep -v "^${mymount}$"                    \
            | xargs -n 1 -I {} cp -a "{}" "${mymount}"  \
            2> /dev/null                                \
            ;

        cd "${mymount}" || exit 1
        exec switch_root -c /dev/console . "${this_link}"
    fi
}

func_1()
{
    mkdir -p /proc /sys /etc
    mount -n -t proc            proc    /proc
    mount -n -t sysfs           sysfs   /sys
    mount -n -o remount,rw      rootfs  /
    ln -sf /proc/mounts /etc/mtab


#   modprobe loop       2> /dev/null
#   modprobe squashfs   2> /dev/null
#   modprobe fuse       2> /dev/null
#   modprobe aufs       2> /dev/null

    find /lib/modules/ -name "*.ko"         \
        | sed "s/.ko$//"                    \
        | xargs -n 1 -I {} basename "{}"    \
        | xargs -n 1 -I {} modprobe "{}"    \
        | 2> /dev/null                      \
        ;

    # https://git.busybox.net/busybox/plain/docs/mdev.txt
    if [ -r /proc/sys/kernel/hotplug ]; then
        echo /sbin/mdev > /proc/sys/kernel/hotplug
    fi
#   sleep 1
#   mdev -s

    touch /boot_done_func_1
}

func_dir()
{
    mymount="/m1"
    mylayer0="${mymount}"/layer0_squashfs
    mylayer1="${mymount}"/layer1_tmpfs
    myunion="${mymount}"/union

    mkdir -p "${mylayer0}"
    mkdir -p "${mylayer1}"
    mkdir -p "${myunion}"
}

func_prompt()
{
    echo ""
    cat << EOF
# option: auto, mount in place
    * run "exec /init auto"

# option: auto, copy to RAM
    * run "exec /init auto_toram"

# option: auto, mount in place, with luks encryption
    * run "exec /init auto_luks"

# option: auto, copy to RAM, with luks encryption
    * run "exec /init auto_luks_toram"

# option: manual, mount in place
    * mount the storage (useful commands: "mdev -s" "blkid")
    * mount root data to "${mylayer0}"/
    * run "exec /init manual"

# option: manual, copy to RAM
    * mount the storage (useful commands: "mdev -s" "blkid")
    * copy root data to  "${mymount}"/
    * mount root data to "${mylayer0}"/
    * unmount the storage
    * run "exec /init manual"
EOF
    echo ""
}

# load root data
func_load_root()
{
    myarg="$1"
    func_dir

    if [ "${myarg}" = "manual" ]; then
        func_prompt
        exec sh
    fi

    sleep 1
    mdev -s
    for myblk in $(blkid | grep -v "^/dev/loop" | cut -d ":" -f 1); do
        mount -o ro "${myblk}" /mnt/
        if [ "$?" != "0" ]; then
            continue
        fi

        case "${myarg}" in
        auto)
            myfn1="/mnt/payload_0/root_declassified.squashfs"
            if [ -f "${myfn1}" ]; then
                mount "${myfn1}" "${mylayer0}"/                 || exit 1
                return 0
            fi
            ;;
        auto_toram)
            myfn1="/mnt/payload_0/root_declassified.squashfs"
            myfn2="${mymount}"/root_declassified.squashfs
            if [ -f "${myfn1}" ]; then
                cp "${myfn1}" "${myfn2}"                        || exit 1
                umount /mnt/                                    || exit 1
                mount "${myfn2}" "${mylayer0}"/                 || exit 1
                return 0
            fi
            ;;
        auto_luks)
            myfn1="/mnt/payload_0/root.squashfs.luks"
            myfn1_enc="$(basename "${myfn1}")_enc"
            if [ -f "${myfn1}" ]; then
                cryptsetup open "${myfn1}" "${myfn1_enc}"       || exit 1
                mount /dev/mapper/"${myfn1_enc}" "${mylayer0}"  || exit 1
                return 0
            fi
            ;;
        auto_luks_toram)
            myfn1="/mnt/payload_0/root.squashfs.luks"
            myfn1_enc="$(basename "${myfn1}")_enc"
            myfn2="${mymount}"/root.squashfs
            if [ -f "${myfn1}" ]; then
                cryptsetup open "${myfn1}" "${myfn1_enc}"       || exit 1
                dd if=/dev/mapper/"${myfn1_enc}" of="${myfn2}"  || exit 1
                cryptsetup close "${myfn1_enc}"                 || exit 1
                umount /mnt/                                    || exit 1
                mount "${myfn2}" "${mylayer0}"                  || exit 1
                return 0
            fi
            ;;
        *)
            echo "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
            echo "wrong arg."
            exec sh
            ;;
        esac

        umount /mnt/                                            || exit 1
    done

    echo "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
    echo "failed to find data."
    exec sh
}


func_3()
{
    func_dir

    if [ "$(ls -A "${mylayer0}" | wc -l | sed 's/^[ \t]*//')" = "0" ]; then
        echo "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        echo "layer0 is not propertly mounted."
        exec sh
    fi

    mount -t tmpfs -o size="80%" tmpfs                              "${mylayer1}"/  || exit 1 # the size of the live kit's rootfs
    mount -t aufs -o br:"${mylayer1}"=rw,br:"${mylayer0}"=ro none   "${myunion}"/   || exit 1

    umount /proc
    umount /sys


    cd "${myunion}" || exit 1


    cat << EOF > ./etc/fstab
aufs    /           aufs    defaults        0 0
proc    /proc       proc    defaults        0 0
sysfs   /sys        sysfs   defaults        0 0
devpts  /dev/pts    devpts  gid=5,mode=620  0 0
tmpfs   /dev/shm    tmpfs   defaults        0 0
EOF

    mkdir -p boot dev proc sys tmp media mnt run
    mkdir -p initramfs
    chmod 1777 tmp

    if [ ! -e ./dev/console ];      then mknod ./dev/console c 5 1; fi
    if [ ! -e ./dev/tty ];          then mknod ./dev/tty     c 5 0; fi
    if [ ! -e ./dev/tty0 ];         then mknod ./dev/tty0    c 4 0; fi
    if [ ! -e ./dev/tty1 ];         then mknod ./dev/tty1    c 4 1; fi
    if [ ! -e ./dev/null ];         then mknod ./dev/null    c 1 3; fi
    if [ ! -e ./sbin/fsck.aufs ];   then ln -s /bin/true ./sbin/fsck.aufs; fi

    pivot_root . ./initramfs

    if [ ! -e ./sbin/chroot ];  then exit 1; fi
    if [ ! -e ./sbin/init   ];  then exit 1; fi
    exec ./sbin/chroot . ./sbin/init < dev/console > dev/console 2>&1
}

func_parse_cmdline()
{
    cat "$1" | grep "\<myflag_auto=1\>"            > /dev/null && echo "auto"            && return 0
    cat "$1" | grep "\<myflag_auto_toram=1\>"      > /dev/null && echo "auto_toram"      && return 0
    cat "$1" | grep "\<myflag_auto_luks=1\>"       > /dev/null && echo "auto_luks"       && return 0
    cat "$1" | grep "\<myflag_auto_luks_toram=1\>" > /dev/null && echo "auto_luks_toram" && return 0
                                                                  echo "manual"          && return 0
}

func_main()
{
    if [ ! -e /boot_cmdline ]; then             # 1st stage
        func_0
        func_1                                  # mounts procfs, and provides /proc/cmdline
        cp /proc/cmdline /boot_cmdline          # cmdline is only available in the current process
        func_load_root "$(func_parse_cmdline /boot_cmdline)"
    else                                        # 2nd stage, for manual workflow
        case "$1" in
        auto|auto_toram|auto_luks|auto_luks_toram)
            func_load_root "$1"
            ;;
        manual)
            :
            ;;
        *)
            echo "wrong arg"
            exec sh
            ;;
        esac
    fi

    func_3

    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    echo "the code should not reach here"
    exec sh
}

func_main "$@"

