#!/bin/sh

# do not set "-e" flag

this_link="$0"

# switch root from initramfs to ramfs
func_0()
{
    if [ ! -e /done_0 ]; then
        touch /done_0
        mymount="m0"
        mkdir -p "${mymount}"               || exit 1
        mount -t tmpfs tmpfs "${mymount}"/  || exit 1

        ls /                                            \
            | grep -v "${mymount}"                      \
            | xargs -n 1 -I {} cp -a "{}" "${mymount}"  \
            2> /dev/null                                \
            ;

        cd "${mymount}" || exit 1
        exec switch_root -c /dev/console . "${this_link}"
    fi
}

func_1()
{
    mkdir -p /proc /sys /etc
    mount -n -t proc            proc    /proc
    mount -n -t sysfs           sysfs   /sys
    mount -n -o remount,rw      rootfs  /
    ln -sf /proc/mounts /etc/mtab


    #modprobe zram       2> /dev/null
    #modprobe loop       2> /dev/null
    #modprobe squashfs   2> /dev/null
    #modprobe fuse       2> /dev/null
    #modprobe aufs       2> /dev/null

    find /lib/modules/ -name "*.ko"         \
        | sed "s/.ko$//"                    \
        | xargs -n 1 -I {} basename "{}"    \
        | xargs -n 1 -I {} modprobe "{}"    \
        | 2> /dev/null                      \
        ;

    # https://git.busybox.net/busybox/plain/docs/mdev.txt
    if [ -r /proc/sys/kernel/hotplug ]; then
        echo /sbin/mdev > /proc/sys/kernel/hotplug
    fi
    sleep 1
    mdev -s

    touch /done_1
}

func_dir()
{
    mymount="/m1"
    mylayer0="${mymount}"/layer0_squashfs
    mylayer1="${mymount}"/layer1_tmpfs
    myunion="${mymount}"/union

    mkdir -p "${mylayer0}"
    mkdir -p "${mylayer1}"
    mkdir -p "${myunion}"
}


# break, and prompt to copy root data
func_break()
{
    func_dir
    touch /done_break

    echo ""
    cat << EOF
# option: mount in place, auto
    * run "exec /init auto"

# option: copy to RAM, auto
    * run "exec /init auto_toram"

# option: mount in place, manual
    * mount the storage (useful commands: "mdev -s" "blkid")
    * mount root data to "${mylayer0}"/
    * run "exec /init contiue"

# option: copy to RAM, manual
    * mount the storage (useful commands: "mdev -s" "blkid")
    * copy root data to  "${mymount}"/
    * mount root data to "${mylayer0}"/
    * unmount the storage
    * run "exec /init contiue"
EOF
    echo ""
    exec sh
}

# copy root data automatically
func_2()
{
    flag_toram="$1"
    func_dir

    myfn="/mnt/payload_0/root.squashfs"

    for myblk in $(blkid | grep -v "^/dev/loop" | cut -d ":" -f 1); do
        mount -o ro "${myblk}" /mnt/
        if [ "$?" = "0" ]; then
            if [ -f "${myfn}" ]; then
                if [ "${flag_toram}" = "1" ]; then
                    cp "${myfn}" "${mymount}"/root.squashfs         || exit 1
                    umount /mnt/                                    || exit 1
                    mount "${mymount}"/root.squashfs "${mylayer0}"/ || exit 1
                    return 0
                else
                    mount "${myfn}"               "${mylayer0}"/    || exit 1
                fi
            else
                umount /mnt/                                        || exit 1
            fi
        fi
    done

    echo "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
    echo "failed to find data."
    exec sh
}


func_3()
{
    func_dir

    if [ "$(ls -A "${mylayer0}" | wc -l | sed 's/^[ \t]*//')" = "0" ]; then
        echo "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
        echo "layer0 is not propertly mounted."
        exec sh
    fi

    mount -t tmpfs tmpfs                                            "${mylayer1}"/  || exit 1
    mount -t aufs -o br:"${mylayer1}"=rw,br:"${mylayer0}"=ro none   "${myunion}"/   || exit 1

    umount /proc
    umount /sys


    cd "${myunion}" || exit 1


    cat << EOF > ./etc/fstab
aufs    /           aufs    defaults 0 0
proc    /proc       proc    defaults 0 0
sysfs   /sys        sysfs   defaults 0 0
devpts  /dev/pts    devpts  gid=5,mode=620 0 0
tmpfs   /dev/shm    tmpfs   defaults 0 0
EOF

    mkdir -p boot dev proc sys tmp media mnt run
#   mkdir -p /media/initramfs
    mkdir -p initramfs
    chmod 1777 tmp

    if [ ! -e ./dev/console ];      then mknod ./dev/console c 5 1; fi
    if [ ! -e ./dev/tty ];          then mknod ./dev/tty     c 5 0; fi
    if [ ! -e ./dev/tty0 ];         then mknod ./dev/tty0    c 4 0; fi
    if [ ! -e ./dev/tty1 ];         then mknod ./dev/tty1    c 4 1; fi
    if [ ! -e ./dev/null ];         then mknod ./dev/null    c 1 3; fi
    if [ ! -e ./sbin/fsck.aufs ];   then ln -s /bin/true ./sbin/fsck.aufs; fi

#   mount -t tmpfs      tmpfs       ./run
#   pivot_root          .           ./media/initramfs
    pivot_root          .           ./initramfs

    if [ ! -e ./sbin/chroot ];  then exit 1; fi
    if [ ! -e ./sbin/init   ];  then exit 1; fi
    exec ./sbin/chroot . ./sbin/init < dev/console > dev/console 2>&1
}

func_main()
{
#   touch /fullauto
    if [ -e /fullauto ]; then       # fullauto workflow
        func_0
        func_1
        func_2 0
        func_3
    elif [ ! -e /done_break ]; then # manual workflow, 1st stage
        func_0
        func_1
        func_break
    else                            # manual workflow, 2nd stage
        case "$1" in
        "auto")
            func_2 0
            func_3
            ;;
        "auto_toram")
            func_2 1
            func_3
            ;;
        "continue")
            func_3
            ;;
        *)
            echo "wrong arg"
            exec sh
            ;;
        esac
    fi

    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    echo "the code should not reach here"
    exec sh
}

func_main "$@"

