#!/bin/sh

#. func_check_os_match.sh        || exit 1
#. func_check_file_exist.sh      || exit 1
#. func_make_xdg_temp_.sh        || exit 1

#func_check_os_match Linux

this_link="$(basename "$0")"


func_usage()
{
    appname="$(basename "$1")"
    cat << EOF
Usage:
    ${appname} -h
    ${appname}             INPUT_FILE
    ${appname} -k KEY_FILE INPUT_FILE
EOF
}

func_run()
{
    myoffset_512B=32768     # see "luks_test_harness_calc_offset"
    myfn="$1"
    myfn_enc="$(basename "${myfn}")_enc"
    myloop="$(sudo losetup -f)"

#   func_check_file_exist "${myfn}"

    option=2
    if [ "${flag_k}" = "0" ]; then
        case "${option}" in
        2|3)
            if [ "${flag_p}" = "1" ]; then
                if [ -f "${arg_p}" ]; then
                    mypassphrase="$(cat "${arg_p}")"
                else
                    echo -n "passphrase? "; stty -echo; read mypassphrase; stty echo; echo
                fi
            else
                echo -n "passphrase? "; stty -echo; read mypassphrase; stty echo; echo
            fi
            ;;
        *)
            ;;
        esac
    fi

    mysz1_512B="$(ls -l --block-size=512 "${myfn}" | cut -d " " -f 5)"
    mysz2_512B="$(echo "${mysz1_512B} + ${myoffset_512B}" | bc)"
    echo "${mysz1_512B}"
    echo "${mysz2_512B}"

    dd if=/dev/zero of="${myfn}".luks bs=512 count="${mysz2_512B}" status=progress                  || exit 1
    sudo losetup "${myloop}" "${myfn}".luks                                                         || exit 1

    if [ "${flag_k}" = "0" ]; then
        case "${option}" in
        1) # interactive
            myargs="--type luks2 --cipher aes-xts-plain64 --key-size 256 --verbose --verify-passphrase"
            sudo cryptsetup ${myargs} luksFormat "${myloop}"                                        || exit 1
            sudo cryptsetup open "${myloop}" "${myfn_enc}"                                          || exit 1
            ;;
        2) # batching
            myargs="--type luks2 --cipher aes-xts-plain64 --key-size 256 --verbose"
            echo "${mypassphrase}" | sudo cryptsetup ${myargs} luksFormat "${myloop}"               || exit 1
            echo "${mypassphrase}" | sudo cryptsetup open "${myloop}" "${myfn_enc}"                 || exit 1
            mypassphrase=""
            ;;
        3) # batching, also working
#           mykey="$(func_make_xdg_temp_file "${this_link}")"
            mykey=/tmp/sdfdwfiewfnev23321msdfdv43sdsdfsdfc
            dd if=/dev/urandom of="${mykey}" bs=32 count=1

            myargs="--type luks2 --cipher aes-xts-plain64 --key-size 256 --hash sha512 --key-file ${mykey}"
            echo "YES" | sudo cryptsetup ${myargs} luksFormat "${myloop}"                           || exit 1
            sudo cryptsetup open --key-file "${mykey}" "${myloop}" "${myfn_enc}"                    || exit 1

            echo "${mypassphrase}" | sudo cryptsetup luksAddKey --key-file "${mykey}" "${myloop}"   || exit 1
            sudo cryptsetup luksRemoveKey --key-file "${mykey}" "${myloop}" "${mykey}"              || exit 1
            mypassphrase=""
            ;;
        *)
            echo "bad option. exit."
            exit 1
            ;;
        esac
    else
        mykey="${arg_k}"
        myargs="--type luks2 --cipher aes-xts-plain64 --key-size 256 --hash sha512 --key-file ${mykey}"
        echo "YES" | sudo cryptsetup ${myargs} luksFormat "${myloop}"                               || exit 1
        sudo cryptsetup open --key-file "${mykey}" "${myloop}" "${myfn_enc}"                        || exit 1
    fi

    sudo dd if="${myfn}" of=/dev/mapper/"${myfn_enc}" status=progress


    a1="$(sudo blockdev --getsize "${myloop}")"
    a2="$(sudo blockdev --getsize /dev/mapper/"${myfn_enc}")"
    echo "${a1}"
    echo "${a2}"
    echo "${a1} - ${a2}" | bc   # should be 32768


    sudo cryptsetup close "${myfn_enc}"                                             || exit 1
    sudo losetup -d "${myloop}"                                                     || exit 1
}

func_main()
{
    flag_k=0
    flag_p=0
    arg_k=""
    options_short=hk:p:

    OPTIND=1
    while getopts "${options_short}" opt; do
        case "${opt}" in
        h)
            func_usage "$0"
            exit 0
            ;;
        k)
            flag_k=1
            flag_p=0
            arg_k="${OPTARG}"
            ;;
        p)
            flag_k=0
            flag_p=1
            arg_p="${OPTARG}"
            ;;
        *)
            echo "exit on illegal options"
            func_usage "$0"
            exit 1
            ;;
        esac
    done
    shift $((OPTIND-1))
    [ "$1" = "--" ] && shift


    if [ "$#" != "1" ]; then
        func_usage "$0"
        exit 1
    else
        func_run "$1"
    fi


}

func_main "$@"

