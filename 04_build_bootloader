#!/bin/sh

# this code is statically linked with lib_sh

func_check_file_general_exist()
{
    if [ ! -e "$1" ]; then
        echo "file $1 not found. exit."
        exit 1
    fi
}

this_link="$(basename "$0")"
dir_target=/tmp/"${this_link}".d


func_build_syslinux_bad()
{
    (
    cd /tmp/
    wget https://mirrors.edge.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.xz
    tar xf syslinux-6.03.tar.xz
    cd syslinux-6.03
    make
    )
}

func_syslinux_config()
{
    args_kernel=""
    args_kernel="${args_kernel} load_ramdisk=1 prompt_ramdisk=0"
    args_kernel="${args_kernel} printk.time=0"
    args_kernel="${args_kernel} apparmor=0"
    args_kernel="${args_kernel} rw"                                 # mount root device read-write on boot
    args_kernel="${args_kernel} net.ifnames=0 biosdevname=0"        # change the defualt NIC name from "enp4s0"-alike to eth0
#   args_kernel="${args_kernel} debug"
#   args_kernel="${args_kernel} myflag0=1"
#   args_kernel="${args_kernel} myflag1=1"
#   args_kernel="${args_kernel} myflag2=1"

    #### initramfs /init example
#   cat /proc/cmdline | grep "\<myflag0=1\>" 2> /dev/null 1>&2
#   rv="$?"
#   if [ "${rv}" = "0" ]; then
#       echo "flag0 is enabled"
#   fi

    cat << EOF
SAY *** press Tab to show labels ***
PROMPT      1
DEFAULT     auto_luks_toram
TIMEOUT     50

LABEL manual
    KERNEL  /payload_0/vmlinuz
    APPEND  initrd=/payload_0/initramfs.cpio.gz ${args_kernel}

LABEL auto
    KERNEL  /payload_0/vmlinuz
    APPEND  initrd=/payload_0/initramfs.cpio.gz ${args_kernel} myflag_auto=1

LABEL auto_toram
    KERNEL  /payload_0/vmlinuz
    APPEND  initrd=/payload_0/initramfs.cpio.gz ${args_kernel} myflag_auto_toram=1

LABEL auto_luks
    KERNEL  /payload_0/vmlinuz
    APPEND  initrd=/payload_0/initramfs.cpio.gz ${args_kernel} myflag_auto_luks=1

LABEL auto_luks_toram
    KERNEL  /payload_0/vmlinuz
    APPEND  initrd=/payload_0/initramfs.cpio.gz ${args_kernel} myflag_auto_luks_toram=1

#LABEL l0
#    KERNEL  /payload_0/vmlinuz
#    APPEND  initrd=/payload_0/initramfs.cpio.gz ${args_kernel} debug
#
#LABEL ipxe
#    KERNEL  /payload_misc/ipxe.exe
#
#LABEL memtest86+
#    KERNEL  /payload_misc/memtest.exe
#
#LABEL iso0
#    KERNEL  /payload_misc/memdisk
#    APPEND  initrd=/payload_misc/Core-current.iso iso
#
#LABEL hdd0.iso
#    KERNEL  /payload_misc/memdisk
#    APPEND  initrd=/payload_misc/a.iso
#
#LABEL hdd1.raw.gz
#    KERNEL  /payload_misc/memdisk
#    APPEND  initrd=/payload_misc/m0.shrink3026M.raw.gz
#
#LABEL hdd2.raw
#    KERNEL  /payload_misc/memdisk
#    APPEND  initrd=/payload_misc/m0.shrink3026M.raw
EOF
}

func_build_bootloader()
{
    # for iso
    func_check_file_general_exist /tmp/syslinux/isolinux.bin    # debian /usr/lib/ISOLINUX/isolinux.bin
    func_check_file_general_exist /tmp/syslinux/ldlinux.c32     # debian /usr/lib/syslinux/modules/bios/ldlinux.c32

    # for UEFI
    func_check_file_general_exist /tmp/syslinux/syslinux.efi    # debian missing
    func_check_file_general_exist /tmp/syslinux/ldlinux.e64     # debian /usr/lib/syslinux/modules/efi64/ldlinux.e64

    # for BIOS MBR
#   func_check_file_general_exist /tmp/syslinux/mbr.bin         # debian /usr/lib/syslinux/mbr/mbr.bin
#   func_check_file_general_exist /tmp/syslinux/gptmbr.bin      # debian /usr/lib/syslinux/mbr/gptmbr.bin

    # payload_misc
    func_check_file_general_exist /tmp/syslinux/memdisk         # debian /usr/lib/syslinux/memdisk


    rm -rf   "${dir_target}"
    mkdir -p "${dir_target}"
    mkdir -p "${dir_target}"/boot/syslinux
    mkdir -p "${dir_target}"/efi/boot
    mkdir -p "${dir_target}"/payload_misc

    cp -f                               \
        /tmp/syslinux/isolinux.bin      \
        /tmp/syslinux/ldlinux.c32       \
        "${dir_target}"/boot/syslinux/  \
        ;
    cp -f                               \
        /tmp/syslinux/syslinux.efi      \
        /tmp/syslinux/ldlinux.e64       \
        "${dir_target}"/efi/boot/       \
        ;
    cp -f                               \
        /tmp/syslinux/memdisk           \
        "${dir_target}"/payload_misc/   \
        ;
    func_syslinux_config > "${dir_target}"/boot/syslinux/syslinux.cfg
    func_syslinux_config > "${dir_target}"/efi/boot/syslinux.cfg
    (
    cd "${dir_target}"/efi/boot/ || exit 1
    mv syslinux.efi bootx64.efi
    )
}

func_main()
{
    func_build_bootloader

    echo "done $0"
}

func_main "$@"

